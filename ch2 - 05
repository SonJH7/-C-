05 :: 배열
05-1
  :: n차원 배열과 초기화 그리고 그 주소(&)
05-2
  :: O(1)  임의접근, 맨뒤 삽입
  :: O(N) 맨 앞 삽입, 중간 삽입 (미는 연산)
05-3
  :: 문제 01 :: 배열 정렬하기 (권장 시간 복잡도 : O(NlogN)

  #include <vector>
  #include <algorithm>

  using namespace std;

  vector<int> solution(vector <int> arr){
    sort(arr.begin(),arr.end());
    return arr;
  }

:: 문제 02 :: 배열 제어하기 (권장 시간 복잡도: O(NlogN)

  #include <vector>
  #include <algorithm>

  using namespace std;

  vector<int> solution(vector <int> lst){
    sort(lst.rbigin(), lst.rend());
    lst.erase(unique(lst.begin(),lst.end()),lst.end());
    return lst;
  }

05-4
  :: 문제 03:: ( 프로그래머스 _ 두 수를 뽑아서 더하기)
ex)
  numbers --> 서로 다른 인덱스에 있는 2개의 수 뽑고 더하기 -> 그 수들 모두 배열에 담아 오름차순으로 반환
  이중 for문 모든 경우의 수 새로운 배열에 넣기 -> 정렬 후 erase,unique 

처음에 벡터 배열 잘못해서 cin >> numbers 이렇게 해버림 

#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

vector<int> solution(vector<int> numbers) {
    vector<int> answer;
    for(int i = 0; i < numbers.size() - 1; i++) {
        for (int j = i + 1; j < numbers.size(); j++) {
            answer.push_back(numbers[i] + numbers[j]);
        }
    }
    sort(answer.begin(), answer.end());   
    answer.erase(unique(answer.begin(), answer.end()), answer.end());
    
    return answer;
}

int main() {
    int n;  
    cin >> n;

    vector<int> numbers(n);  
    for (int i = 0; i < n; i++) {
        cin >> numbers[i];  
    }

    vector<int> result = solution(numbers); 

    for (int i = 0; i < result.size(); i++) {
        cout << result[i] << " ";
    }
    cout << endl;

    return 0;
}
//set 자료구조를 쓰면 알아서 중복 제거, 오름차순이 되는구

  :: 문제 04 :: 모의 고사 ( 프로그래머스_완전탐색 ) 
이거 그냥 완전 모듈러 연산 항상 반복되는 무언가는 '나머지' 생각

  :: 문제 05 행렬의 곱셈  ( 프로그래머스 _ 연습문제)
그냥 막 해부렸으 행렬의 연산시 인덱스만 주의 
#include <string>
#include <vector>

using namespace std;

vector<vector<int>> solution(vector<vector<int>> arr1, vector<vector<int>> arr2) {
    
    int row1 = arr1.size(), col1 = arr1[0].size(), row2 = arr2.size(), col2 = arr2[0].size();
    vector<vector<int>> answer(row1, vector<int>(col2, 0));
    for(int i=0; i<row1; i++){
        for(int j=0; j<col2; j++){
            for(int k=0; k<col1; k++){
                answer[i][j] += arr1[i][k]*arr2[k][j];
            }
        }
    }
    return answer;
}
:: 문제 06 :: 실패율 ( 프로그래머스_KaKao ) 
// 알고리즘은 쉬우나 구현 문법을 몰라 gpt
#include <string>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

vector<int> solution(int N, vector<int> stages) {
    int bm = 0, bj = 0;
    map<int, float> a;
    vector<int> answer;

    // N보다 큰 스테이지에 도달한 플레이어 수를 분모에 넣기
    for (int i = 0; i < stages.size(); i++) {
        if (stages[i] > N) bm++;
    }

    // 각 스테이지의 실패율 계산하여 맵에 저장
    for (int i = N; i > 0; i--) {
        int t = count(stages.begin(), stages.end(), i); // 현재 스테이지에 있는 플레이어 수
        bm += t;
        if (bm > 0) a[i] = static_cast<float>(t) / bm; // 실패율 저장
        else a[i] = 0; // 분모가 0인 경우 실패율 0
    }

    // map을 vector<pair<int, float>>로 변환하여 실패율을 기준으로 정렬
    vector<pair<int, float>> failureRates(a.begin(), a.end());
    sort(failureRates.begin(), failureRates.end(), [](const pair<int, float>& a, const pair<int, float>& b) {
        if (a.second == b.second) return a.first < b.first; // 실패율이 같으면 스테이지 번호 오름차순
        return a.second > b.second; // 실패율 내림차순
    });

    // 정렬된 스테이지 번호를 answer에 추가
    for (const auto& p : failureRates) {
        answer.push_back(p.first);
    }

    return answer;
}
처음엔 맵으로 하고 받았는데 pair을 쓴느데 굳이 맵?
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> solution(int N, vector<int> stages) {
    int bm = 0, bj = 0;
    vector<pair<int, float>> failureRates;
    vector<int> answer;

    // N보다 큰 스테이지에 도달한 플레이어 수를 분모에 넣기
    for (int stage : stages) {
        if (stage > N) bm++;
    }

    // 각 스테이지의 실패율 계산하여 벡터에 저장
    for (int i = N; i > 0; i--) {
        int t = count(stages.begin(), stages.end(), i); // 현재 스테이지에 있는 플레이어 수
        bm += t;
        float failureRate = (bm > 0) ? static_cast<float>(t) / bm : 0; // 실패율
        failureRates.push_back({i, failureRate});
    }

    // 실패율을 기준으로 정렬
    sort(failureRates.begin(), failureRates.end(), [](const pair<int, float>& a, const pair<int, float>& b) {
        if (a.second == b.second) return a.first < b.first; // 실패율이 같으면 스테이지 번호 오름차순
        return a.second > b.second; // 실패율 내림차순
    });

    // 정렬된 스테이지 번호를 answer에 추가
    for (const auto& p : failureRates) {
        answer.push_back(p.first);
    }

    return answer;
}


:: 문제 07 :: 방문 길이 ( 프로그래머스 ) 
U: 위 , D : 아래 , R: 오른쪽, L: 왼쪽 --> 전체를 0으로 초기화 한 10*10 2차원 배열로 생각 -->  이동 시 마다 좌표에 +1 --> 0이 아닌 좌표는 카운트 x
  --> 예외가 너무 많다... 모르겠다.... 점으로 하다보니 답이 없다고 생각함
--> pair로 시작위치 끝위치 전부 저장후 

#include <string>
#include <set>

using namespace std;

int solution(string dirs) {
    int answer = 0;
    pair<int, int> position = {5, 5}; 
    set<pair<pair<int,int>, pair<int,int>>> visited;
    
    for(char dir : dirs){
        pair<int, int> start = position;
        
        if(dir == 'U' && position.first < 10) position.first++;
        else if (dir == 'D' && position.first > 0) position.first--;
        else if (dir == 'R' && position.second < 10) position.second++;
        else if (dir == 'L' && position.second > 0) position.second--;

        pair<int, int> end = position;
    
        if(start != end){
            if (visited.find({start, end}) == visited.end() && visited.find({end, start}) == visited.end()) {
                visited.insert({start, end});
                visited.insert({end, start}); // 양방향으로 경로 기록
                answer++;
            }
        }
    }
    return answer;
}
  --> 책의 풀이는 이해가 안간다..
