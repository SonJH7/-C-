07 :: 큐
07 - 1 
 :: 줄을 서다, 선입선출, FIFO, front() : 마지막에 팝한 위치 기록, rear() : 최근에 푸시한 위치 기록 , empty(), q.size() --> 큐의 크기
 :: 원형 큐도 존재(선형 큐는 front,rear이 한 방향으로 이동, 원형 큐는 한 방향으로 이동

07 - 2
:: 문제 15 요세푸스 문제 ( 저자출제 )

마지막 남은 사람 한명 번호... 
#include <queue>
#include <iostream>

int solution(int n, int k){
    queue <int> q;
    int c=0;
    int p=1;
    while(n > 1){
        
        while(c<k){
            q.push(p++);
            c++;
        }
        c=0;
        q.pop();
    }
}

혼자 이상한 짓 하다가 답지를 보고 이해한대로 다시 적어본다

#include <iostream>
#include <queue>

using namespace std;
int solution (int n, int k){
  queue <int> q;
  for(int i=1; i<=n; i++)
    q.push(i);

  while(q.size() > 1){
    for(int i=0; i<k-1; i++){
      q.push(q.front());
      q.pop();
    }
    q.pop();
  }
  return q.front();
}
:: 문제 16 기능 개발 ( 프로그래머스_스택/큐 ) --->
완전 벡터밖에 생각이 안나서 벡터로 
a라는 중간 완료일 수 넣는 벡터 만들고-> 그기서 원소간 비교
#include <string>
#include <vector>
#include <iostream>

using namespace std;

vector<int> solution(vector<int> progresses, vector<int> speeds) {
    
    vector<int> a;
    for(int i=0; i<progresses.size(); i++){
        int t=0;
        while(progresses[i]<100){
            progresses[i] += speeds[i];
            t++;    
        }
        cout << t << '\n';
        a.push_back(t);
    }
    vector<int> answer;
    int answer_t=1;
    for(int i=0; i<a.size()-1; i++){
        if (a[i]<a[i+1]){
            answer.push_back(answer_t);
            answer_t = 1;
        }
        else
            answer_t++;
    }
    answer.push_back(answer_t);

    return answer;
}
근데 이때 a[i]< a[i+1] 에서 계속 오류가 났는데 며칠동안 찾지못하다가 a에 저장된 원소기준 9,7,1,7일 경우
answer에 새로운 원소가 생기면 안되는데 생김 그래서

    vector<int> answer;
    int answer_t=1;
    int max_element = a[0];
    for(int i=1; i<a.size(); i++){
        if (a[i]>max_element){
            answer.push_back(answer_t);
            answer_t = 1;
            max_element = a[i];
        }
        else
            answer_t++;
    }
    answer.push_back(answer_t);

    return answer;
}
아래부분만 이렇게 바꿈
다른 사람 풀이 보니까 while 과정 그냥 나눗셈 처리... 지린다 덱은 어떡하지? 책봐야지

:: 문제 17 카드 뭉치 ( 프로그래머스_연습문제 ) 
--> 처음에 덱을 안써도 되지않나 싶어 벡터하나만들고, 이중 for문으로 goal돌리고, 그안에 goal == card1|| card2 이런식으로 전부탐색하는걸로 했따가
이러면 순서대로 출력이 안되고 탐색해서 출력해서 항상 같은 문장이 나오는 걸 발견

--> 그래서 선입선출 구조인 큐를 써야겠따고 생각 q1,q2 큐 만들어서 cards1, cards2 집어넣고 처음 넣은거랑 goal이랑 같은거만 새로운 벡터 q로 들어가게 함
(이떄 큐 front 문법이 앞인지 뒤인지 기억이 안나 좀 찾아봄. queue<string> q 이렇게 정의 하는 것도 확신이 없어서 확인해봄)
#include <string>
#include <vector>
#include <queue>
using namespace std;

string solution(vector<string> cards1, vector<string> cards2, vector<string> goal) {
    string answer = "";
    queue <string> q1;
    queue <string> q2;
    vector <string> q;
    for(int j=0; j<cards1.size(); j++){
            q1.push(cards1[j]);
        }
    for(int j=0; j<cards2.size(); j++){
            q2.push(cards2[j]);
    }
    
    for(int i=0; i<goal.size(); i++){
        if(!q1.empty() && goal[i] == q1.front()){  //나중에 알게된 실수 부분 다행히 비어있는게 없어서 통과는 함
            q.push_back(q1.front());
            q1.pop();
        }
        if(!q2.empty() && goal[i] == q2.front()){
            q.push_back(q2.front());
            q2.pop();
        }
    }
    int j=0;
    while(q[j] == goal[j]){
        j++;
    }
    if(j == goal.size())
        answer = "Yes";
    else
        answer = "No";
    return answer;
}
