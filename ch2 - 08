ch2 - 08 :: 해시

  :: 정의 : 해시함수를 이용해서 변환한 값을 인덱스로 삼아 키와 값을 저장해서 빠른 데이터 탐색을 제공하는 자료구조
    --> 키를 이용해 빠른 데이터 탐색, STL에서 unordered_map이랑 동일

  :: 특징 : 단방향으로 동작 ( 키 -> 값 O, 값 -> 키 X), 키를 통해 해쉬함수 호출 후 함수가 해쉬주소 반환
  :: 해쉬 테이블 : 이러한 키와 대응한 값이 저장되어 있는 공간 (각 데이터를 버킷이라고 함)
  
  08 - 2 :: 해시 함수

  :: 구현 시 고려할 내용
    - 첫번째, 해시 함수가 변환한 값은 인덱스로 활용해야 하므로 해시 테이블의 크기를 넘으면 안됨.
    - 두번째, 해시 함수가 변환한 값의 충돌은 최대한 적게 발생해야한다.( 충돌 = 두 키에 대해 결과 동일)

  :: 자주 이용되는 해시 함수 알아보기 (x = 키, k = 소수, A = 황금비 , m = 테이블의 크기 , p = 31( 해시 충돌 줄이는 수인 메르센 소수 )
    - 나눗셈법 : 키를 소수로 나눈 나머지를 활용 (모듈러 연산) -> h(x) = x mod k ( 테이블 크기는 K)
    - 곱셈법 : 나눗셈법은 큰 소수 활용 -> 쉽지 않음 -> 곱셈은 소수활용 x, 황금비 -> h(x) = (((x*A)mod1)*m) --> mod1하고 소수부분만 취함
    - 문자열 해싱 : 문자열의 문자를 숫자로 변환하고 이 숫자들을 다항식의 값으로 변환해서 해싱 -> hash(s) = (s[0] + s[1]*p + ~ s[n-1]*p^(n-1))mod m 
      --> 방법 p274 요약: 매치표 숫자가 s[n] --> 숫자 너무 커짐 수정 공식 : (a+b)%c = (a%c+b%c)%c

  08 - 3 :: 충돌 처리

  :: 체이닝으로 처리하기 : 링크드리스트로 충돌한 데이터를 연결하는 방식으로 충돌 해결
    -> 단점 : 공간 활용성 떨어짐, 검색 성능 떨어짐
  :: 개방 주소법으로 처리하기 : 빈 버킷을 찾아 삽입 -> 이중 해싱 방식 h(k,i)=(hi(k)+i*h(k))mod m, 선형 탐사 방식 h(k,i)=(h(k)+i)mod m

문제 18 :: 두 개의 수로 특정 값 만들기 --> 저자출제
