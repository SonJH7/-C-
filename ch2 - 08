ch2 - 08 :: 해시

  :: 정의 : 해시함수를 이용해서 변환한 값을 인덱스로 삼아 키와 값을 저장해서 빠른 데이터 탐색을 제공하는 자료구조
    --> 키를 이용해 빠른 데이터 탐색, STL에서 unordered_map이랑 동일

  :: 특징 : 단방향으로 동작 ( 키 -> 값 O, 값 -> 키 X), 키를 통해 해쉬함수 호출 후 함수가 해쉬주소 반환
  :: 해쉬 테이블 : 이러한 키와 대응한 값이 저장되어 있는 공간 (각 데이터를 버킷이라고 함)
  
  08 - 2 :: 해시 함수

  :: 구현 시 고려할 내용
    - 첫번째, 해시 함수가 변환한 값은 인덱스로 활용해야 하므로 해시 테이블의 크기를 넘으면 안됨.
    - 두번째, 해시 함수가 변환한 값의 충돌은 최대한 적게 발생해야한다.( 충돌 = 두 키에 대해 결과 동일)

  :: 자주 이용되는 해시 함수 알아보기 (x = 키, k = 소수, A = 황금비 , m = 테이블의 크기 , p = 31( 해시 충돌 줄이는 수인 메르센 소수 )
    - 나눗셈법 : 키를 소수로 나눈 나머지를 활용 (모듈러 연산) -> h(x) = x mod k ( 테이블 크기는 K)
    - 곱셈법 : 나눗셈법은 큰 소수 활용 -> 쉽지 않음 -> 곱셈은 소수활용 x, 황금비 -> h(x) = (((x*A)mod1)*m) --> mod1하고 소수부분만 취함
    - 문자열 해싱 : 문자열의 문자를 숫자로 변환하고 이 숫자들을 다항식의 값으로 변환해서 해싱 -> hash(s) = (s[0] + s[1]*p + ~ s[n-1]*p^(n-1))mod m 
      --> 방법 p274 요약: 매치표 숫자가 s[n] --> 숫자 너무 커짐 수정 공식 : (a+b)%c = (a%c+b%c)%c

  08 - 3 :: 충돌 처리

  :: 체이닝으로 처리하기 : 링크드리스트로 충돌한 데이터를 연결하는 방식으로 충돌 해결
    -> 단점 : 공간 활용성 떨어짐, 검색 성능 떨어짐
  :: 개방 주소법으로 처리하기 : 빈 버킷을 찾아 삽입 -> 이중 해싱 방식 h(k,i)=(hi(k)+i*h(k))mod m, 선형 탐사 방식 h(k,i)=(h(k)+i)mod m

문제 18 :: 두 개의 수로 특정 값 만들기 --> 저자출제(skip)
문제 19 :: 문자열 해싱을 이용한 검색 함수 만들기 --> 저자출제(skip)

문제 20 :: 완주하지 못한 선수 --> 프로그래머스_해시
#include <string>
#include <vector>

using namespace std;

string solution(vector<string> participant, vector<string> completion) {
    string answer = "";
    for(int i=0; i<completion.size();i++){
        for(int j=0; j<participant.size(); j++)
            if(completion[i] == participant[j]){
                participant[j] = "no";
                break;
            }
    }
    for(int i=0; i<participant.size(); i++)
        if(participant[i] != "no")
            answer = participant[i];
    return answer;
}
이렇게 짜서 정확성은 만족시켰는데 효율성 부족 이유는 당연히 안다. 이중loop 그래서 맵을 이용해야하는 데 문법을 모르겠네 (문자열 해싱 -> 이름 자체를 인덱스로)

알고리즘은 part 배열들 이름에 해당하는 배열들 다 세고 comp 배열들 센거 에서 빼면 하나 남은 그거 루프들어가서 찾기 문법 몰라서 gpt 행..
#include <string>
#include <vector>
#include <unordered_map>

using namespace std;

string solution(vector<string> participant, vector<string> completion) {
    unordered_map<string, int> hashMap;

    // 참가자를 해시 맵에 추가하며 카운트
    for (const auto& p : participant) {
        hashMap[p]++;
    }

    // 완주한 사람을 해시 맵에서 감소
    for (const auto& c : completion) {
        hashMap[c]--;
    }

    // 해시 맵에서 값이 1인 참가자가 완주하지 못한 사람
    for (const auto& entry : hashMap) {
        if (entry.second > 0) {
            return entry.first; //p.294  저자 풀이 도 좋네!
        }
    }

    return "";
}

문제 21 :: 영어 끝말잇기 --> summer/winter Coding 2018


일단 전부 순회 하며 1) 뒷글자 첫글자 같은지 비교 다르면 --> 그 위치 리턴 2) 했던거 하면(set) -> 그 위치 리턴
그 위치는 처음 1,1로 시작해서 전체 크기 나눗셈 활용하여 계속 증가
gpt 프롬프트 : set에서 insert 메서드 까먹어서 한번, string 벡터 string 문자열 index 접근

--> 답지 피드백 : 지리네...
//이거 해시 완성하고 다시 오면 해시맵으로 풀기
#include <string>
#include <vector>
#include <set>
using namespace std;

vector<int> solution(int n, vector<string> words) {
    vector<int> answer;
    set<string> word;
    char temp = words[0][0];
    int word_len = 0;
    int person_index = 1;
    int index = 1;
    for(int i=0; i<words.size(); i++){
        
        
        if(words[i][0] != temp){  // 밑에 두개 필터를 if(!useWords.insert(words[i]).second || words[i].front() != words[i-1].back()) 이렇게 써버림
            answer.push_back(person_index); 
            answer.push_back(index);
            return answer;
        }
        temp = words[i][words[i].size()-1];
        word.insert(words[i]);
        word_len++;
        
        if(word.size()!= word_len){
            answer.push_back(person_index);  // answer[0] = i%n +1;
            answer.push_back(index);         // answer[1] = i/n +1;
            return answer;
        }
        
        
        if(person_index % n == 0){
            person_index = 1;
            index++;
        }
        else
            person_index++;
    }

    answer.push_back(0);
    answer.push_back(0);
    return answer;
}

문제 22 :: 전화번호 목록 (해시)
substr
문제 23 :: 할인 행사 (연습문제)

#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

int solution(vector<string> want, vector<int> number, vector<string> discount) {
    int answer = 0;
    vector <string> want_extend;
    for(int i=0; i<want.size(); i++){
        for(int j=0; j<number[i]; j++){
            want_extend.push_back(want[i]);
        }
    }
    sort(want_extend.begin(), want_extend.end());
    for(int i=0; i<discount.size()- 9; i++){
        vector<string> s(discount.begin()+i,discount.begin()+i+10);
        sort(s.begin(),s.end());
        int j=0;
        while(want_extend[j] == s[j]){
            j++;
        }
        if(j == 10)
            answer++;
    }
    return answer;
} -> 답지 풀이도 너무 좋음

문제 24 :: 오픈 채팅방 (2019 KaKao)  --> skip
sstream....

문제 25 :: 베스트 앨범 (해시) --> skip
문제 26 :: 신고 결과 받기 (2022 Kakao) --> skip
문제 27 :: 메뉴 리뉴얼 (2021 Kakao) --> skip
