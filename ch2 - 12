12 - 백트래킹

12 - 1
  :: 백트래킹 : 가능성이 없는 곳에서는 되돌아가고, 가능성이 있는 곳을 탐색하는 알고리즘
      유효한 답의 집합 정의 --> 정의한 집합을 그래프로 표현합니다 --> 유망 함수 정의 -> 백트래킹 알고리즘을 활용해서 답을 찾는다.
  :: 유망함수 : 가능성이 있는 곳을 따지는 특정 조건
  :: 부분 집합 합 : 1부터 N까지의 숫자를 조합했을 때 합이 K가 되는 조합을 찾는 문제
  :: N - Queen : n * n안에서 퀸끼리 안 닿는 곳을 찾기

12 - 2
  :: 문제 47 :: 1부터 N까지 숫자 중 합이 10이 되는 조합 구하기 ( 저자 출제 )
- 백트래킹 구현, 오름차순정렬, 1<= N <= 10, 같은 숫자는 한 번만 선택
재귀로 백트래킹 10이 되는거 1차열 배열에 넣고, 1차열 배열이 10 되면 2차원 배열에 넣고 근데.. 문법을 몰겠다

#include <vector>

using namespace std;

vector<vector<int>> results;
vector<int> selected_nums;

void backtrack(int N, int sum, int start) {
  //❶ 합이 10인경우, 조합을 결과에 추가하고 종료
  if (sum == 10) {
    results.push_back(selected_nums);
    return;
  }
  for (int i = start; i <= N; ++i) {
    //❷ 합이 10보다 적은 경우, 가능한 조합을 계속 확인
    if (sum + i <= 10) {
      selected_nums.push_back(i);
      backtrack(N, sum + i, i + 1);
      selected_nums.pop_back();
    }
  }
}

vector<vector<int>> solution(int N) {
  //❸ 숫자 1부터 백트래킹 시작
  backtrack(N, 0, 1);
  return results;
}



//아래 코드는 테스트 코드 입니다.
#include <iterator>
#include <iostream>

using namespace std;

void init()
{
  results.clear();
  selected_nums.clear();    
}

void print(vector<vector<int>> vec)
{
    
  for(int i = 0; i < vec.size(); i++ ){
    copy(vec[i].begin(), vec[i].end(), std::ostream_iterator<int>(cout, " "));
    cout << endl;
  }
    
}

int main()
{
  print(solution(5));
  init();
  /*
    출력값
    1 2 3 4 
    1 4 5 
    2 3 5 
  */
  print(solution(2));
  init();
  /*
    출력값(없음)
  */  
  print(solution(7));
  /*
    출력값
    1 2 3 4 
    1 2 7 
    1 3 6 
    1 4 5 
    2 3 5 
    3 7 
    4 6 
  */
  return 0;
}

:: 문제 48 :: 스도쿠 퍼즐 ( 저자 출제 )---> 스킵
:: 문제 49 :: 피로도 ( 프로그래머스 )
