ch 2 - 09  :: 트리

  09 - 1  
    트리 개념 :: 루트 노드 (가장 위에 있는 노드) , 간선 또는 에지 (노드와 노드 사이를 이어주는 선), 부모-자식노드 형제노드, 리프노드(말단노드), 차수 ( 아래로 향하는 간선의 개수)
  09 - 2
    이진 트리 :: 노드 하나가 최대 2개의 자식 노드갖는다.
    배열로 만드는 방법 :: 루트 노드는 배열 인덱스 1번에 저장, 왼쪽 자식 노드의 배열 인덱스는 부모 노드의 배열 인덱스 * 2, 오른쪽 자식 노드의 배열 인덱스는 부모 노드의 배열 인덱스 * 2 + 1 (루트 노드 0번이면 다름)

    이진 트리 순회하기 (자세한 내용 p350 ~ 357)
    :: 전위 순회(preorder) : 현재 노드를 부모 노드로 생각했을 때 부모 노드 -> 왼쪽 자식 노드 -> 오른쪽 자식 노드 순서로 방문합니다.
    :: 중위 순회(inorder) : 현재 노드를 부모 노드로 생각했을 때 왼쪽 자식 노드 -> 부모 노드 -> 오른쪽 자식 노드 순서로 방문합니다.
    :: 후위 순회(postorder) : 현재 노드를 부모 노드로 생각했을 때 왼쪽 자식 노드 -> 오른쪽 자식 노드 -> 부모 노드 순서로 방문합니다. 

    이진 트리 표현하기 
    :: 포인터로 표현하기 인덱스 연산x, 메모리 공간을 낭비하지 않습니다.
    :: 인접 리스트로 표현하기

  09 - 3
    이진 트리 탐색하기 : 탐색을 효율적으로 할 수 있게끔 트리를 구축하는 것이 중요
    :: 이진 탐색 트리 : 데이터 크기를 따져 크기가 작으면 왼쪽 자식 위치에, 크거나 같으면 오른쪽 자식 위치에 배치하는 독특한 정렬 방식을 갖고 있습니다. (삽입 정렬 동시)
    1단계 : 최초의 데이터는 루트 노드(3)
    2단계 : 현재 삽입하려는 데이터는 7. 3보다 크므로 오른쪽 자식 위치 작으면, 왼쪽
    '''

    탐색방법 
    : 찾으려는 값이 현재 노드의 값과 같으면 탐색 종료하고 크면 오른쪽 노드 탐색, 본인이 찾으려는 값이 현재 노드의 값보다 작으면 왼쪽 노드를 탐색, 값을 찾으면 종료.
    -> O(logN)

  09 - 4
  :: 몸풀기 문제

  문제 28 :: 트리 순회
    #include <iostream>
#include <vector>
#include <string>

using namespace std;

// 전위순회
string preorder(const vector<int>& nodes, int idx) {
  if (idx < nodes.size()) {
    string ret = to_string(nodes[idx]) + " ";
    ret += preorder(nodes, idx * 2 + 1);
    ret += preorder(nodes, idx * 2 + 2);
    return ret;
  } 
  
  return "";
}

// 중위순회
string inorder(const vector<int>& nodes, int idx) {
  if (idx < nodes.size()) {
    string ret = inorder(nodes, idx * 2 + 1);
    ret += to_string(nodes[idx]) + " ";
    ret += inorder(nodes, idx * 2 + 2);
    return ret;
  } 
  
  return "";
}

// 후위순회
string postorder(const vector<int>& nodes, int idx) {
  if (idx < nodes.size()) {
    string ret = postorder(nodes, idx * 2 + 1);
    ret += postorder(nodes, idx * 2 + 2);
    ret += to_string(nodes[idx]) + " ";
    return ret;
  } 
  
  return "";
}

vector<string> solution(const vector<int>& nodes) {
  vector<string> result;
  string pre = preorder(nodes, 0);
  string in = inorder(nodes, 0);
  string post = postorder(nodes, 0);

  // 마지막 공백을 제거한 결과를 result에 추가
  pre.pop_back();
  in.pop_back();
  post.pop_back();

  result.push_back(pre);
  result.push_back(in);
  result.push_back(post);

  return result;
}

//아래 코드는 테스트 코드 입니다.
#include <iterator>
#include <iostream>
void print(vector<string> vec)
{
    copy(vec.begin(), vec.end(), std::ostream_iterator<string>(cout, "\n"));
    cout << endl;
}

int main()
{
    print(solution({1, 2, 3, 4, 5, 6, 7})); 
    /** 
     출력값 
     1 2 4 5 3 6 7
     4 2 5 1 6 3 7
     4 5 2 6 7 3 1
    **/
    
    return 0;
}

  문제 29 :: 이진 탐색 트리 구현h 2 - 09  :: 트리

  09 - 1  
    트리 개념 :: 루트 노드 (가장 위에 있는 노드) , 간선 또는 에지 (노드와 노드 사이를 이어주는 선), 부모-자식노드 형제노드, 리프노드(말단노드), 차수 ( 아래로 향하는 간선의 개수)
  09 - 2
    이진 트리 :: 노드 하나가 최대 2개의 자식 노드갖는다.
    배열로 만드는 방법 :: 루트 노드는 배열 인덱스 1번에 저장, 왼쪽 자식 노드의 배열 인덱스는 부모 노드의 배열 인덱스 * 2, 오른쪽 자식 노드의 배열 인덱스는 부모 노드의 배열 인덱스 * 2 + 1 (루트 노드 0번이면 다름)

    이진 트리 순회하기 (자세한 내용 p350 ~ 357)
    :: 전위 순회(preorder) : 현재 노드를 부모 노드로 생각했을 때 부모 노드 -> 왼쪽 자식 노드 -> 오른쪽 자식 노드 순서로 방문합니다.
    :: 중위 순회(inorder) : 현재 노드를 부모 노드로 생각했을 때 왼쪽 자식 노드 -> 부모 노드 -> 오른쪽 자식 노드 순서로 방문합니다.
    :: 후위 순회(postorder) : 현재 노드를 부모 노드로 생각했을 때 왼쪽 자식 노드 -> 오른쪽 자식 노드 -> 부모 노드 순서로 방문합니다. 

    이진 트리 표현하기 
    :: 포인터로 표현하기 인덱스 연산x, 메모리 공간을 낭비하지 않습니다.
    :: 인접 리스트로 표현하기

  09 - 3
    이진 트리 탐색하기 : 탐색을 효율적으로 할 수 있게끔 트리를 구축하는 것이 중요
    :: 이진 탐색 트리 : 데이터 크기를 따져 크기가 작으면 왼쪽 자식 위치에, 크거나 같으면 오른쪽 자식 위치에 배치하는 독특한 정렬 방식을 갖고 있습니다. (삽입 정렬 동시)
    1단계 : 최초의 데이터는 루트 노드(3)
    2단계 : 현재 삽입하려는 데이터는 7. 3보다 크므로 오른쪽 자식 위치 작으면, 왼쪽
    '''

    탐색방법 
    : 찾으려는 값이 현재 노드의 값과 같으면 탐색 종료하고 크면 오른쪽 노드 탐색, 본인이 찾으려는 값이 현재 노드의 값보다 작으면 왼쪽 노드를 탐색, 값을 찾으면 종료.
    -> O(logN)

  09 - 4
  :: 몸풀기 문제

  문제 28 :: 트리 순회
    #include <iostream>
#include <vector>
#include <string>

using namespace std;

// 전위순회
string preorder(const vector<int>& nodes, int idx) {
  if (idx < nodes.size()) {
    string ret = to_string(nodes[idx]) + " ";
    ret += preorder(nodes, idx * 2 + 1);
    ret += preorder(nodes, idx * 2 + 2);
    return ret;
  } 
  
  return "";
}

// 중위순회
string inorder(const vector<int>& nodes, int idx) {
  if (idx < nodes.size()) {
    string ret = inorder(nodes, idx * 2 + 1);
    ret += to_string(nodes[idx]) + " ";
    ret += inorder(nodes, idx * 2 + 2);
    return ret;
  } 
  
  return "";
}

// 후위순회
string postorder(const vector<int>& nodes, int idx) {
  if (idx < nodes.size()) {
    string ret = postorder(nodes, idx * 2 + 1);
    ret += postorder(nodes, idx * 2 + 2);
    ret += to_string(nodes[idx]) + " ";
    return ret;
  } 
  
  return "";
}

vector<string> solution(const vector<int>& nodes) {
  vector<string> result;
  string pre = preorder(nodes, 0);
  string in = inorder(nodes, 0);
  string post = postorder(nodes, 0);

  // 마지막 공백을 제거한 결과를 result에 추가
  pre.pop_back();
  in.pop_back();
  post.pop_back();

  result.push_back(pre);
  result.push_back(in);
  result.push_back(post);

  return result;
}

//아래 코드는 테스트 코드 입니다.
#include <iterator>
#include <iostream>
void print(vector<string> vec)
{
    copy(vec.begin(), vec.end(), std::ostream_iterator<string>(cout, "\n"));
    cout << endl;
}

int main()
{
    print(solution({1, 2, 3, 4, 5, 6, 7})); 
    /** 
     출력값 
     1 2 4 5 3 6 7
     4 2 5 1 6 3 7
     4 5 2 6 7 3 1
    **/
    
    return 0;
}

  문제 29 :: 이진 탐색 트리 구현
#include <vector>
using namespace std;

// ❶ 노드를 정의
class Node {
public:
  int val;
  Node *left, *right;

  Node(int key) : val(key), left(nullptr), right(nullptr) {}
};

//❷ 이진 탐색 트리 정의
class BST {
private:
  Node* root;

  
  Node* insertNode(Node* node, int key) {
    if (!node) {
      return new Node(key);
    }
    //❸ 키 값과 현재 노드의 값을 비교해서 이진탐색트리 규칙에 맞는 위치로 이동
    if (key < node->val) {
      node->left = insertNode(node->left, key);
    } else {
      node->right = insertNode(node->right, key);
    }
    return node;
  }

  bool searchNode(Node* node, int key) {
    //❹ 찾는 키 값이 없는 경우 
    if (!node) {
      return false;
    }
    //❺ 이진탐색트리에서 키 값을 찾은 경우
    if (key == node->val) {
      return true;
    }
    //❻ 아직 값을 찾지 못한 경우, 현재 노드값과 key 값을 비교해서, 어느 노드에서 탐색할지 결정
    return key < node->val ? 
           searchNode(node->left, key) : 
           searchNode(node->right, key);
  }

public:
  BST() : root(nullptr) {}

  void insert(int key) {
    root = insertNode(root, key);
  }

  bool search(int key) {
    return searchNode(root, key);
  }
};

vector<bool> solution(vector<int> lst, vector<int> search_lst) {
  BST bst;
  // 이진 탐색 트리에 노드 삽입
  for (int key : lst) {
    bst.insert(key);
  }

  vector<bool> result;
  // 이진 탐색 트리에서 찾는 값이 있는지 확인하고 탐색결과를 result에 추가
  for (int search_val : search_lst) {
    result.push_back(bst.search(search_val));
  }

  return result;
}

//아래 코드는 테스트 코드 입니다.
#include <iterator>
#include <iostream>
void print(vector<bool> vec)
{
    copy(vec.begin(), vec.end(), std::ostream_iterator<bool>(cout, " "));
    cout << endl;
}

int main()
{
    // bool을 출력할 때 true는 1 false는 0 입니다.
    print(solution({5, 3, 8, 4, 2, 1, 7, 10}, {1, 2, 5, 6})); //출력값 : 1 1 1 0
    print(solution({1, 3, 5, 7, 9}, {2, 4, 6, 8, 10})); //출력값 : 0 0 0 0 0    
    return 0;
}

문제 30 :: 예상 대진표

처음에 직관적으로 풀었다가 진짜 소수의 테스트 케이스가 통과하지 않았다. 결과 다음 경우를 생각하면 어차피 만나니까 정답 코드 너무 좋은거 같
#include <cmath>

using namespace std;

int solution(int n, int a, int b)
{
    int answer = 1;
    
    while(abs(a-b) != 1){
        if(a%2 ==0 )
            a/=2;
        else if(a == 1)
            a = 1;
        else{
            a++;
            a/=2;
        }
        if(b%2==0)
            b/=2;
        else if(b == 1)
            b = 1;
        else{
            b++;
            b/=2;
        }
        answer++;
    }

    return answer;
}

문제 31,32 --> 건너뜀 ㅋㅋ   }
